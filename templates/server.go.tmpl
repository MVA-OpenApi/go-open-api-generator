package main

import (
	"{{.ModuleName}}/pkg/handler"
	"{{.ModuleName}}/pkg/util"
	
	{{if .UseLogger}}
		"os"
	{{end}}

	"github.com/rs/zerolog/log"
	"github.com/labstack/echo/v4"
	{{- if .UseLogger}}
		"github.com/labstack/echo/v4/middleware"
	{{- end}}
)

func main() {
	// load config
	config, err := util.LoadConfig(".")
	if err != nil {
		log.Error().Err(err).Msg("Failed to load config file.")
		return
	}	

	{{if .UseLogger}}
		// create and open config file
		f, err := os.OpenFile("logfile", os.O_RDWR|os.O_CREATE, 0666)
		if err != nil {
			log.Error().Err(err).Msg("Failed to create and open logging file.")
			return
		}
	{{end}}

	// start echo server
	e := echo.New()

	handler.NewHandler(e)
	{{if .UseLogger}}
		e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Format: "method=${method}, uri=${uri}, status=${status}\n",
		Output: f,
		}))
	{{end}}
	
	// serve frontend
	e.File("/", "public/index.html")
	e.File("/{{.OpenAPIName}}.yaml", "public/{{.OpenAPIName}}.yaml")

	e.Logger.Fatal(e.Start(":" + config.ServerPort))
}
